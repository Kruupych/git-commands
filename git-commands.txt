==================================================================================================
					КОНФИГУРАЦИЯ
==================================================================================================

Генерация пары ssh ключей:

	ssh-keygen -t rsa -C "vitali_shulha@epam.com"

Публичный ключ (id_rsa) нужно отправить владельцу репозитория для получения прав работы. Или загрузить в настройки профиля в bitbucket/github/gitlab

Настройка имени пользователя и емейла:

	git config --global user.name “Vitali Shulha“

	git config --global user.email “vitali_Shulha@epam.com"

==================================================================================================
					ОСНОВЫ
==================================================================================================

Смена директории(можно продолжать перемещение указав следующую папку без указания полного пути):

	cd /c/users...s

Текущий путь:

	pwd


Перенос репозитория на компьютер с сервера:

	git clone ref

Просмотр всех файлов по текущему пути:

	ls

посмотреть источник репозитория:

	git remote -v

посмотреть список изменений(текущий статус):

	git status

добавить новый файл в коммит(или измененить текущий файл):

	git add file.txt

сохранить изменения(сделать коммит):

	git commit -m "комментарий(опционально)"

история коммитов:

	git log

отправить на сервер(в источник):

	git push

Синхронизация локального репозитория с серверным("подтянуть" изменения):

	git pull 

==================================================================================================
					ИНСТРУМЕНТЫ
==================================================================================================

Открыть граф.интерфейс в новом окне одновременно оставшись в git bush:

	git gui&

Открыть gitk (для просмотра истории):

	gitk&


==================================================================================================
					ОТМЕНА ИЗМЕНЕНИЙ
==================================================================================================

Откат изменений в одном файле до добавления в коммит:

	git checkout -- file.txt

Откат изменений во всех возможных файлах ещё до добавления в коммит:

	git chekcout .

Удалить новые файлы, которые ещё не добавлены в коммит:

	git.clean -xdf
флаги:
x - игнор .gitignore
d - удалять директории, если они неизвестны гиту
f - сила(чтобы что-то почистить, нужен флаг force)

Отмена добавления файла в коммит(когда файл на уровне индекса(staged)):

	git reset -- file.txt

Дополнить коммит:

	git commit --amend -m"comments"

Откатить коммит:

	git reset HEAD^^ (HEAD~2)

^- сколько коммитов откатить или можно так - HEAD~1
флаги:
по умолчанию --mixed(откат до уровня файловой системы)
--soft - откат до индекса
--hard - вообще удалить изменения

Откат пуша:
	
	git revert<sha1>

sha1 можно писать не полностью, а например первые 5 символов
sha1 можно узнать в git log или в источнике
После ввода комманды откроется зеркальный коммит(в очень старом редакторе), где 
клавиша "insert" для добавления комментариев в зеркальный коммит
клавиша "esc" для отмены
комманда ":wq" - для сохранения и выхода из редактора
комманда ":q!" - просто выйти


==================================================================================================
					ФАЙЛ .gitignore
==================================================================================================

этот файл нужен для того, чтобы не показывать измененения в некоторых файлах(т.е эти файлы не будут добавляться в коммит и т.д)

чтобы создать его, нужно написатть в git bash: touch .gitignore
файл не будет игнорироваться, если он есть в коммите или в репозитории
чтобы удалить файл из индексации:

	git rm --cached <file-name> 

Что делать, если файлы есть в репозитории или в коммите?
Самый простой путь - удалить из кэша ВСЕ файлы, и добавить заново с учетом gitignore. на все про все 2 команды:

	git rm -rf --cached .
	git add .

как пользоваться:
1)можно просто написать внутри .gitignore название файла для игнора
2)можно написать *.log тем самым включить игнор всех файлов с расишрение .log(кроме исключений)
3)если добавить ! к файлу, то он будет считаться исключением и никогда не будет игнорироваться


==================================================================================================
					ВЕТКИ(бранчи)
==================================================================================================

Создать ветку и сразу на неё переключиться:

	git checkout -b название_ветки

Переход между ветками:

	git checkout название_ветки

Синхронизировать ветки:
допустим мы находимся в main ветке и хотим влить в неё ветку feature(все коммиты), для этого:

	git merge feature

если non-fast-forward merge, то можно добавить комментарий через клавишу "insert" и выйти коммандой ":wq"
 
При конфликте(изменения одного и того же файла в разных ветках) нужно принять решение(завершить конфликт) по поводу этого файла и сделать коммит или отменить merge через git merge --abort

Способы решения конфликта:
1)Вручную
2)git checkout --Xours - тогда все чужие изменения отбросятся
3)git checkout --Xothers - все ваши изменения отбросятся
4)различные инструменты, как я полагаю гугл в помощь